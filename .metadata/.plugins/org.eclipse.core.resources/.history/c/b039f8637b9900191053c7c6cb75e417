package cfg;

import java.util.Properties;

import javax.persistence.EntityManager;
import javax.persistence.EntityManagerFactory;
import javax.sql.DataSource;

import org.springframework.context.annotation.Bean;
import org.springframework.context.annotation.ComponentScan;
import org.springframework.context.annotation.Configuration;
import org.springframework.core.env.Environment;
import org.springframework.data.jpa.repository.config.EnableJpaRepositories;
import org.springframework.jdbc.datasource.DriverManagerDataSource;
import org.springframework.orm.jpa.JpaTransactionManager;
import org.springframework.orm.jpa.LocalContainerEntityManagerFactoryBean;
import org.springframework.orm.jpa.vendor.HibernateJpaVendorAdapter;
import org.springframework.transaction.annotation.EnableTransactionManagement;
//https://www.baeldung.com/the-persistence-layer-with-spring-and-jpa
// Es una etiqueta que le dice a spring que va a ser una clase que va a contener
// beanes @Beans para de alta
@Configuration
@ComponentScan(basePackages = { "modelo" }) //Quiero que te escanes los paquetes que estan en modelo
@EnableTransactionManagement //Le esamos diciendo a spring que lleve el las transacciones
@EnableJpaRepositories( {basePackage = "modelo.persistencia"})
public class Configuracion {

	@Bean
	public DataSource dataSource() {
		DriverManagerDataSource ds = new DriverManagerDataSource();
		/* configuracion para mysql
		ds.setDriverClassName("com.mysql.cj.jdbc.Driver");
		ds.setUrl("jdbc:mysql://localhost:3306/jpa?useUnicode=true&useJDBCCompliantTimezoneShift=true&useLegacyDatetimeCode=false&serverTimezone=UTC");
		ds.setUsername("root");
		ds.setPassword("root");*/
		ds.setDriverClassName("org.h2.Driver");
		ds.setUrl("jdbc:h2:file:/home/pue/Documents/pruebaJpaData"); // la ruta donde esta la bbdd
		ds.setUsername("sa"); //usuario
		ds.setPassword("");
		return ds;
	}

	@Bean
	public LocalContainerEntityManagerFactoryBean 
		entityManagerFactory(DataSource dataSource, Environment env) {
		LocalContainerEntityManagerFactoryBean entityManagerFactoryBean = 
			new LocalContainerEntityManagerFactoryBean();
		entityManagerFactoryBean.setDataSource(dataSource);
		entityManagerFactoryBean.setJpaVendorAdapter(new HibernateJpaVendorAdapter());
		entityManagerFactoryBean.setPackagesToScan("modelo.entidad"); //aqui le estoy pidiente
		// que me busque los @Entity del paquete modelo.entidad

		Properties jpaProperties = new Properties();
		/* mysql
		jpaProperties.put("hibernate.dialect", "org.hibernate.dialect.MySQL8Dialect");
		*/
		jpaProperties.put("hibernate.dialect", "org.hibernate.dialect.H2Dialect"); 
		//dialecto de sql
		
		jpaProperties.put("hibernate.hbm2ddl.auto", "create-drop");//create-drop update
		jpaProperties.put("hibernate.show_sql", "true");
		jpaProperties.put("hibernate.format_sql", "false");
		entityManagerFactoryBean.setJpaProperties(jpaProperties);

		return entityManagerFactoryBean;
	}
	
	@Bean
	JpaTransactionManager transactionManager(EntityManagerFactory entityManagerFactory) {
		JpaTransactionManager transactionManager = new JpaTransactionManager();
		transactionManager.setEntityManagerFactory(entityManagerFactory);
		return transactionManager;
	}
	
}